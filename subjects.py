from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import datetime
import all_buttons as bt
import db_request as db
import sqlite3
import config as conf

config = conf.load_config("bot.ini")

# –û–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=config.tg_bot.token)


lang = db.get_lang
all_button = {'bkz': bt.subject_values_kz, 'bru': bt.subject_values_ru, 'mkz': bt.magistracy_buttons_kz,
              'mru': bt.magistracy_buttons_ru, 'dkz': bt.doctoranture_buttons_kz, 'dru': bt.doctoranture_buttons_ru,
              'ckz': bt.college_buttons_kz, 'cru': bt.college_buttons_ru, 'pkz': bt.subject_price_kz,
              'pru': bt.subject_price_ru}


class subject_wait(StatesGroup):
    waiting_for_subjects = State()


class price_wait(StatesGroup):
    waiting_for_subjects = State()

class magistracy_wait(StatesGroup):
    waiting_for_subjects = State()

class doctoranture_wait(StatesGroup):
    waiting_for_subjects = State()

class college_wait(StatesGroup):
    waiting_for_subjects = State()

async def cmd_discount(call):
    buttons = bt.buttons_for_discount
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(*buttons)

    match (str(type(call))):
        case "<class 'aiogram.types.message.Message'>":
            data = db.discount_drom_bd('100%', lang(call.from_user.id))
            await call.answer(text=data, reply_markup=keyboard)
        case "<class 'aiogram.types.callback_query.CallbackQuery'>":  # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–∫—Å—Ç —Ä–∞–≤–µ–Ω —Ç–µ–∫—Å—Ç—É –Ω–∞ –∑–∞–º–µ–Ω—É –û–®–ò–ë–ö–ê
            data = db.discount_drom_bd(call.data, lang(call.from_user.id))
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=data,
                                        reply_markup=keyboard)
            await bot.answer_callback_query(callback_query_id=call.id)

async def cmd_menu(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    match lang(message.from_user.id):
        case "kz":
            keyboard.add(*bt.buttons_kz)
            await message.answer("–ö–∞–ª–∞–π –º–∞–∫–∞–ª–∞–π", reply_markup=keyboard)
        case "ru":
            keyboard.add(*bt.buttons_ru)
            await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ö–æ—Ä–∫—ã—Ç –ê—Ç–∞ –±–æ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Åüôã‚Äç‚ôÇÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                                 reply_markup=keyboard)
    await state.finish()


async def cmd_subject_items(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2, )
    buttons = all_button['b'+lang(message.from_user.id)]
    keyboard.add(*buttons)
    keyboard.add('üîÑ–ù–∞–∑–∞–¥üîÑ')
    match lang(message.from_user.id):
        case "kz":
            await message.answer("–ü”ô–Ω–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑", reply_markup=keyboard)
        case "ru":
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã", reply_markup=keyboard)
    await subject_wait.waiting_for_subjects.set()

async def subject_balls(user_press,state: FSMContext):
    keys = bt.subject_keys
    values = all_button['b'+lang(user_press.from_user.id)]

    match (str(type(user_press))):
        case "<class 'aiogram.types.message.Message'>":         #–¥–ª—è —Ç–∏–ø–∞ message
            if user_press.text not in all_button['b'+lang(user_press.from_user.id)]:
                return
            subject_and_year = user_press.text.split('/')
            otvet = user_press.answer
        case "<class 'aiogram.types.callback_query.CallbackQuery'>":    #–¥–ª—è —Ç–∏–ø–∞ callback
            #if user_press.message.text not in all_button['b'+lang(user_press.from_user.id)]:
            #    return
            subject_and_year = user_press.data.split('/')
            subject_and_year[0] = values[keys.index(subject_and_year[0])]
            otvet = user_press.message.answer

    try:
        subject_and_year[1]
    except IndexError:
        now = datetime.datetime.now()       # –°—Ç–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –≥–æ–¥
        subject_and_year.insert(1, now.year - 1)

    data = db.subject_ball_from_bd(subject_and_year[0], int(subject_and_year[1]), lang(user_press.from_user.id))  # –ó–∞–ø—Ä–æ—Å –Ω–∞ –±–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –≥–æ–¥–∞

    keyboard = types.InlineKeyboardMarkup(row_width=1)
    buttons = []
    year = {'kz': '–∂—ã–ª', 'ru': '–≥–æ–¥'}
    for list_year in data[1]:
        buttons.append(types.InlineKeyboardButton(text=f"{str(list_year[0])[5:]} {year[lang(user_press.from_user.id)]}",
                                                  callback_data=keys[values.index(subject_and_year[0])] + '/' + str(
                                                      list_year[0])[5:]))
    keyboard.add(*buttons)
    await otvet(data[0], reply_markup=keyboard)


async def cmd_price_items(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2, )
    buttons = all_button['p' + lang(message.from_user.id)]
    keyboard.add(*buttons)
    keyboard.add('üîÑ–ù–∞–∑–∞–¥üîÑ')
    match lang(message.from_user.id):
        case "kz":
            await message.answer("–ü”ô–Ω–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑", reply_markup=keyboard)
        case "ru":
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã", reply_markup=keyboard)
    await price_wait.waiting_for_subjects.set()

async def price(message: types.Message, state: FSMContext):
    if message.text not in all_button['p'+lang(message.from_user.id)]:
        return
    data = db.price(message.text, lang(message.from_user.id))
    await message.answer(data)


async def cmd_magistracy_items(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    buttons = all_button['m'+lang(message.from_user.id)]
    keyboard.add(*buttons)
    keyboard.add('üîÑ–ù–∞–∑–∞–¥üîÑ')
    match lang(message.from_user.id):
        case "kz":
            await message.answer("idk —Ç–∞“£–¥–∞“£—ã–∑", reply_markup=keyboard)
        case "ru":
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ idk", reply_markup=keyboard)
    await magistracy_wait.waiting_for_subjects.set()

async def magistracy(message: types.Message):
    if message.text not in all_button['m'+lang(message.from_user.id)]:
        return
    data = db.magistracy(message.text, lang(message.from_user.id))
    await message.answer(data)


async def cmd_doctoranture_items(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    buttons = all_button['d' + lang(message.from_user.id)]
    keyboard.add(*buttons)
    keyboard.add('üîÑ–ù–∞–∑–∞–¥üîÑ')
    match lang(message.from_user.id):
        case 'kz':
            await message.answer('üë®‚Äçüî¨–î–æ–∫—Ç–æ—Ä–∞–Ω—Ç—É—Ä–∞ idk —Ç–∞“£–¥–∞“£—ã–∑üë®‚Äçüî¨', reply_markup=keyboard)
        case 'ru':
            await message.answer("üë®‚Äçüî¨–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ–∫—Ç–æ—Ä–∞–Ω—Ç—É—Ä—ãüë®‚Äçüî¨", reply_markup=keyboard)
    await doctoranture_wait.waiting_for_subjects.set()

async def doctoranture(message: types.Message):
    if message.text not in all_button['d'+lang(message.from_user.id)]:
        return
    data = db.doctoranture(message.text, lang(message.from_user.id))
    await message.answer(data)


async def cmd_college_items(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    buttons = all_button['c'+lang(message.from_user.id)]
    keyboard.add(*buttons)
    keyboard.add('üîÑ–ù–∞–∑–∞–¥üîÑ')
    match lang(message.from_user.id):
        case "kz":
            await message.answer("idk —Ç–∞“£–¥–∞“£—ã–∑", reply_markup=keyboard)
        case "ru":
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ idk", reply_markup=keyboard)
    await college_wait.waiting_for_subjects.set()


async def college(message: types.Message):
    if message.text not in all_button['c'+lang(message.from_user.id)]:
        return
    data = db.college(message.text, lang(message.from_user.id))
    await message.answer(data)

async def cmd_start(message: types.message):
    try:
        db.get_lang(message.from_user.id)
        await cmd_menu(message)
    except IndexError:
        buttons = [
            types.InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π –Ø–∑—ã–∫", callback_data='/ru',),
            types.InlineKeyboardButton(text="“ö–∞–∑–∞“õ —Ç—ñ–ª—ñ", callback_data='/kz'),
        ]
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(*buttons)
        await message.answer(
            "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥: \n/ru \n/kz \n/menu\n–ß—Ç–æ –±—ã –Ω–µ –ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é, –º—ã –¥–æ–±–∞–≤–∏–ª–∏ "
            "–∫–Ω–æ–ø–∫—É —Å–ª–µ–≤–∞ –æ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –ù–∞–∂–∞–≤ –Ω–∞ –Ω–µ–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã.\n–¢–∞–∫ –∂–µ –Ω–∞—à –±–æ—Ç "
            "–ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º –∏–ª–∏ –∏–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ. –î–ª—è —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ "
            "–Ω–∞–∂–∞—Ç—å –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É, –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞"
            "\n<b>–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:</b>", reply_markup=keyboard, parse_mode='html')

async def language(user):
    match (str(type(user))):
        case "<class 'aiogram.types.message.Message'>":
            match user.text:
                case '/kz':
                    db.update_lang(user.from_user.id, 'kz')
                    await user.answer('–∫–∞–∑–∞–∫')
                case '/ru':
                    db.update_lang(user.from_user.id, 'ru')
                    await user.answer('—Ä—É—Å—Å–∫–∏–π')
            await cmd_menu(user)
        case "<class 'aiogram.types.callback_query.CallbackQuery'>":
            try:
                match user.data:
                    case '/kz':
                        db.insert_users(user.from_user.id, 'kz')
                        await user.message.answer('—Å–∏–∑ –±–∏–∑–≥–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –µ—Ç—Ç–∏–Ω–∏–∑')
                    case '/ru':
                        db.insert_users(user.from_user.id, 'ru')
                        await user.message.answer('–≤—ã –Ω–∞ –Ω–∞—Å –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å')
            except sqlite3.IntegrityError:
                pass

async def cmd_ask_ques(message: types.Message):

     buttons = [types.InlineKeyboardButton(text="–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞ WhatsApp", callback_data='100',
                                           url='http://wa.me/+77029224458')]
     keyboard = types.InlineKeyboardMarkup()
     keyboard.add(*buttons)
     await message.answer("<a href='http://wa.me/+77029224458'><b>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞ WhatsApp</b></a>", parse_mode='html',
                          reply_markup=keyboard)

def register_handlers_subjects(dp: Dispatcher):
    dp.register_message_handler(cmd_ask_ques, text=["‚ùì–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å‚ùì","‚ùì–°“±—Ä–∞“ì—ã“£—ã–∑ –±–∞—Ä –º–∞?‚ùì"])

    dp.register_message_handler(cmd_discount, text=["üìã–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –≥—Ä–∞–Ω—Ç—ã –∏ —Å–∫–∏–¥–∫–∏üìã","üìã–Ü—à–∫—ñ –≥—Ä–∞–Ω—Ç—Ç–∞—Ä –º–µ–Ω –∂–µ“£—ñ–ª–¥—ñ–∫—Ç–µ—Äüìã"],
                                state="*")
    dp.register_callback_query_handler(cmd_discount, lambda call: call.data in ['100%', '50%', '25%', '20%', '10%'])

    dp.register_message_handler(cmd_menu, text='üîÑ–ù–∞–∑–∞–¥üîÑ', state="*")
    dp.register_message_handler(cmd_menu, commands='menu', state="*")
    dp.register_message_handler(cmd_start, commands='start', state="*")

    dp.register_message_handler(language, commands=['ru', 'kz'], state="*")
    dp.register_callback_query_handler(language, lambda call: call.data in ['/ru', '/kz'])

    dp.register_message_handler(cmd_subject_items, text=['üìö–ü—Ä–µ–¥–º–µ—Ç—ãüìö', 'üìö–ú–µ–Ω—ñ“£ —Ç–∞“£–¥–∞—É –ø”ô–Ω–¥–µ—Ä—ñ–ºüìö'], state="*")
    dp.register_message_handler(subject_balls, state=subject_wait.waiting_for_subjects)
    dp.register_callback_query_handler(subject_balls, lambda call: call.data.split('/')[0] in bt.subject_keys,
                                       state="*")

    dp.register_message_handler(cmd_price_items, text=['üí∞–û–ø–ª–∞—Ç–∞üí∞', 'üí∞2021 –∂—ã–ª“ì—ã –æ“õ—É –∞“õ—ã—Å—ãüí∞'], state="*")
    dp.register_message_handler(price, state=price_wait.waiting_for_subjects)

    dp.register_message_handler(cmd_magistracy_items, text=["üë®üèª‚Äçüéì–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ãüë®üèª‚Äçüéì",
                                                            "üë®üèª‚Äçüéì–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞ –º–∞–º–∞–Ω–¥—ã“õ—Ç–∞—Ä—ãüë®üèª‚Äçüéì"], state="*")
    dp.register_message_handler(magistracy, state=magistracy_wait.waiting_for_subjects)

    dp.register_message_handler(cmd_doctoranture_items, text=["üë®‚Äçüî¨–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –î–æ–∫—Ç–æ—Ä–∞–Ω—Ç—É—Ä—ãüë®‚Äçüî¨",
                                                              "üë®‚Äçüî¨–î–æ–∫—Ç–æ—Ä–∞–Ω—Ç—É—Ä–∞ –º–∞–º–∞–Ω–¥—ã“õ—Ç–∞—Ä—ãüë®‚Äçüî¨"], state="*")
    dp.register_message_handler(doctoranture, state=doctoranture_wait.waiting_for_subjects)

    dp.register_message_handler(cmd_college_items, text=["üè¢–ö–æ–ª–ª–µ–¥–∂ –ï–ù–¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏üè¢",
                                                         "üè¢–ö–æ–ª–ª–µ–¥–∂ - “∞–ë–¢ - –ú–∞–º–∞–Ω–¥—ã“õ—Ç–∞—Ä—ãüè¢"], state="*")
    dp.register_message_handler(college, state=college_wait.waiting_for_subjects)